#!/bin/bash

# BATbern Platform - Pre-push Hook
# Runs full test suite before pushing to ensure code quality

set -e

echo "üöÄ Running pre-push validation..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Track if any checks failed
CHECKS_FAILED=0

# Function to run tests with timeout
run_with_timeout() {
    local TIMEOUT=$1
    shift
    local COMMAND="$@"

    timeout $TIMEOUT bash -c "$COMMAND" || {
        echo -e "${RED}‚ùå Command timed out or failed: $COMMAND${NC}"
        return 1
    }
}

echo -e "${BLUE}üìä Running full test suite...${NC}"

# Run frontend tests
if [ -d "frontend" ] || [ -f "package.json" ]; then
    echo -e "${YELLOW}üé® Running frontend tests...${NC}"

    if [ -d "frontend" ]; then
        cd frontend
    fi

    # Run unit tests with coverage
    echo "  Running unit tests..."
    run_with_timeout 120 "npm run test:unit -- --coverage --run" || CHECKS_FAILED=1

    # Check coverage thresholds
    if [ -f "coverage/coverage-summary.json" ]; then
        COVERAGE=$(node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const lines = coverage.total.lines.pct;
            console.log(lines);
            if (lines < 85) process.exit(1);
        " 2>/dev/null) || {
            echo -e "${RED}‚ùå Frontend coverage below 85% threshold${NC}"
            CHECKS_FAILED=1
        }
    fi

    # Run integration tests
    echo "  Running integration tests..."
    run_with_timeout 180 "npm run test:integration -- --run" || CHECKS_FAILED=1

    if [ -d "frontend" ]; then
        cd ..
    fi
fi

# Run backend tests
if [ -f "gradlew" ] || [ -f "build.gradle" ]; then
    echo -e "${YELLOW}‚òï Running backend tests...${NC}"

    # Run all tests with coverage
    echo "  Running unit tests..."
    run_with_timeout 180 "./gradlew test jacocoTestReport" || CHECKS_FAILED=1

    # Check coverage thresholds
    if [ -f "build/reports/jacoco/test/jacocoTestReport.xml" ]; then
        COVERAGE=$(grep -o 'missed="[0-9]*" covered="[0-9]*"' build/reports/jacoco/test/jacocoTestReport.xml | head -1)
        # Parse and check coverage (simplified check)
        echo "  Coverage report generated"
    fi

    # Run integration tests
    echo "  Running integration tests..."
    run_with_timeout 300 "./gradlew integrationTest" || CHECKS_FAILED=1
fi

# Run E2E tests (only if explicitly configured)
if [ -f "playwright.config.ts" ] && [ "$RUN_E2E_ON_PUSH" = "true" ]; then
    echo -e "${YELLOW}üé≠ Running E2E tests...${NC}"
    run_with_timeout 600 "npx playwright test --reporter=list" || CHECKS_FAILED=1
fi

# Check for uncommitted changes (in case tests modified files)
if ! git diff --quiet; then
    echo -e "${RED}‚ùå Tests modified files. Please review and commit changes:${NC}"
    git diff --name-only
    CHECKS_FAILED=1
fi

# Validate branch naming
BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ ! "$BRANCH" =~ ^(main|develop|feature/.*|hotfix/.*|release/.*)$ ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Branch name '$BRANCH' doesn't follow naming convention${NC}"
    echo "  Expected: feature/*, hotfix/*, release/*, main, or develop"
fi

# Check for large files
LARGE_FILES=$(git diff --stat --cached origin/$(git rev-parse --abbrev-ref HEAD) 2>/dev/null | grep -E "([0-9]+) files? changed.*\+[0-9]{5,}" || true)
if [ -n "$LARGE_FILES" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Large files detected in commit${NC}"
    echo "$LARGE_FILES"
fi

# TDD Validation - Check test-to-code ratio
echo -e "${BLUE}üìà Validating TDD practices...${NC}"

# Get commits being pushed
COMMITS=$(git rev-list origin/$(git rev-parse --abbrev-ref HEAD)..HEAD 2>/dev/null || true)

if [ -n "$COMMITS" ]; then
    for COMMIT in $COMMITS; do
        COMMIT_MSG=$(git log -1 --pretty=%s $COMMIT)
        COMMIT_TYPE=$(echo $COMMIT_MSG | cut -d':' -f1 | cut -d'(' -f1)

        # Check for test commits followed by implementation
        if [ "$COMMIT_TYPE" = "feat" ] || [ "$COMMIT_TYPE" = "fix" ]; then
            # Check if there's a preceding test commit
            PREV_COMMIT=$(git rev-list -1 $COMMIT^ 2>/dev/null || true)
            if [ -n "$PREV_COMMIT" ]; then
                PREV_MSG=$(git log -1 --pretty=%s $PREV_COMMIT)
                PREV_TYPE=$(echo $PREV_MSG | cut -d':' -f1 | cut -d'(' -f1)

                if [ "$PREV_TYPE" != "test" ]; then
                    echo -e "${YELLOW}‚ö†Ô∏è  TDD Warning: Feature/fix commit without preceding test commit${NC}"
                    echo "    Commit: $COMMIT_MSG"
                fi
            fi
        fi
    done
fi

# Security checks
echo -e "${BLUE}üîí Running security checks...${NC}"

# Check for credentials or secrets
SECRETS=$(git diff --cached --name-only | xargs grep -l -E "(password|secret|token|key).*=.*['\"].*['\"]" 2>/dev/null || true)
if [ -n "$SECRETS" ]; then
    echo -e "${RED}‚ùå Potential secrets detected in:${NC}"
    echo "$SECRETS"
    echo -e "${RED}Please review and remove any hardcoded credentials${NC}"
    CHECKS_FAILED=1
fi

# Final summary
echo ""
if [ $CHECKS_FAILED -ne 0 ]; then
    echo -e "${RED}‚ùå Pre-push validation failed!${NC}"
    echo -e "${RED}Please fix the issues above before pushing.${NC}"
    echo ""
    echo "To bypass this check (NOT recommended), use:"
    echo "  git push --no-verify"
    exit 1
fi

echo -e "${GREEN}‚úÖ All pre-push checks passed successfully!${NC}"
echo -e "${GREEN}Ready to push to remote repository.${NC}"
exit 0