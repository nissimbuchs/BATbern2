#!/bin/bash

# BATbern Platform - Pre-commit Hook
# Enforces TDD practices by running tests for changed files

set -e

echo "üß™ Running pre-commit tests for changed files..."

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Get list of staged files
STAGED_FILES=$(git diff --cached --name-only --diff-filter=ACM)

if [ -z "$STAGED_FILES" ]; then
    echo "No files staged for commit"
    exit 0
fi

# Check for TypeScript/JavaScript changes
TS_FILES=$(echo "$STAGED_FILES" | grep -E '\.(ts|tsx|js|jsx)$' || true)
JAVA_FILES=$(echo "$STAGED_FILES" | grep -E '\.java$' || true)

# Track if any tests failed
TESTS_FAILED=0

# Run frontend tests if TypeScript/JavaScript files changed
if [ -n "$TS_FILES" ]; then
    echo -e "${YELLOW}üì¶ Frontend files changed, running tests...${NC}"

    # Check if test files exist for changed components
    for FILE in $TS_FILES; do
        if [[ $FILE == *"src/components"* ]] || [[ $FILE == *"src/hooks"* ]] || [[ $FILE == *"src/services"* ]]; then
            TEST_FILE="${FILE%.tsx}.test.tsx"
            TEST_FILE="${TEST_FILE%.ts}.test.ts"

            if [ ! -f "$TEST_FILE" ] && [[ $FILE != *.test.* ]]; then
                echo -e "${RED}‚ùå Missing test file for: $FILE${NC}"
                echo -e "${RED}   Expected: $TEST_FILE${NC}"
                TESTS_FAILED=1
            fi
        fi
    done

    # Run tests for changed files
    if [ -d "frontend" ]; then
        cd frontend
        npm run test:related -- $TS_FILES --run --passWithNoTests || TESTS_FAILED=1
        cd ..
    elif [ -f "package.json" ]; then
        npm run test:related -- $TS_FILES --run --passWithNoTests || TESTS_FAILED=1
    fi
fi

# Run backend tests if Java files changed
if [ -n "$JAVA_FILES" ]; then
    echo -e "${YELLOW}‚òï Java files changed, running tests...${NC}"

    # Check if test files exist for changed classes
    for FILE in $JAVA_FILES; do
        if [[ $FILE == *"src/main/java"* ]]; then
            # Convert main path to test path
            TEST_FILE="${FILE/src\/main\/java/src\/test\/unit}"
            TEST_FILE="${TEST_FILE%.java}Test.java"

            if [ ! -f "$TEST_FILE" ] && [[ $FILE != *Test.java ]]; then
                echo -e "${RED}‚ùå Missing test file for: $FILE${NC}"
                echo -e "${RED}   Expected: $TEST_FILE${NC}"
                TESTS_FAILED=1
            fi
        fi
    done

    # Run Gradle tests for changed files
    if [ -f "gradlew" ]; then
        ./gradlew test --tests "*Test" || TESTS_FAILED=1
    fi
fi

# Check for linting issues
echo -e "${YELLOW}üîç Running linters...${NC}"

if [ -n "$TS_FILES" ]; then
    if [ -f ".eslintrc.json" ] || [ -f ".eslintrc.js" ]; then
        npx eslint $TS_FILES || TESTS_FAILED=1
    fi
fi

if [ -n "$JAVA_FILES" ]; then
    if [ -f "checkstyle.xml" ]; then
        ./gradlew checkstyleMain || TESTS_FAILED=1
    fi
fi

# Check commit message format for TDD workflow
COMMIT_MSG_FILE=".git/COMMIT_EDITMSG"
if [ -f "$COMMIT_MSG_FILE" ]; then
    COMMIT_TYPE=$(head -1 "$COMMIT_MSG_FILE" | cut -d':' -f1 | cut -d'(' -f1)

    # Check if this is a test commit without implementation
    if [ "$COMMIT_TYPE" = "test" ]; then
        # Check if implementation files are being committed with test files
        IMPL_FILES=$(echo "$STAGED_FILES" | grep -v -E '\.(test|spec)\.(ts|tsx|js|jsx|java)$' | grep -v -E 'Test\.java$' || true)

        if [ -n "$IMPL_FILES" ]; then
            echo -e "${YELLOW}‚ö†Ô∏è  Warning: Committing implementation files with a 'test' commit type${NC}"
            echo -e "${YELLOW}   TDD workflow suggests committing tests first, then implementation${NC}"
        fi
    fi
fi

# Final check
if [ $TESTS_FAILED -ne 0 ]; then
    echo -e "${RED}‚ùå Pre-commit checks failed!${NC}"
    echo -e "${RED}Please fix the issues above before committing.${NC}"
    echo ""
    echo "To bypass this check (NOT recommended), use:"
    echo "  git commit --no-verify"
    exit 1
fi

echo -e "${GREEN}‚úÖ All pre-commit checks passed!${NC}"
exit 0