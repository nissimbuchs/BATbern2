name: Deploy to Development

on:
  workflow_run:
    workflows: ["Build Pipeline"]
    types: [completed]
    branches: [develop]

env:
  AWS_REGION: eu-central-1
  ENVIRONMENT: dev

jobs:
  deploy-to-dev:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Install CDK dependencies
        working-directory: ./infrastructure
        run: |
          if [ -f "package.json" ]; then
            npm ci
          else
            echo "::warning::Infrastructure package.json not found"
            exit 0
          fi

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Run database migrations
        run: |
          if [ -d "shared-kernel" ] && [ -f "shared-kernel/gradlew" ]; then
            cd shared-kernel
            chmod +x gradlew
            # Run Flyway migrations for dev environment
            ./gradlew flywayMigrate \
              -Dflyway.url=${{ secrets.DEV_DB_URL }} \
              -Dflyway.user=${{ secrets.DEV_DB_USER }} \
              -Dflyway.password=${{ secrets.DEV_DB_PASSWORD }} \
              --no-daemon || echo "::warning::Flyway migrations not configured yet"
          else
            echo "::warning::Shared kernel not found, skipping migrations"
          fi

      - name: Deploy infrastructure to dev
        working-directory: ./infrastructure
        run: |
          if [ -f "package.json" ]; then
            # Generate version tag
            VERSION="${GITHUB_SHA:0:7}-dev.${GITHUB_RUN_NUMBER}"
            echo "Deploying version: $VERSION"

            # Deploy to dev environment
            npm run deploy:dev -- \
              --context version=$VERSION \
              --require-approval never || echo "::warning::CDK deployment not fully configured yet"
          else
            echo "::warning::Infrastructure not configured yet"
          fi
        env:
          IMAGE_TAG: ${{ github.sha }}

      - name: Wait for ECS services to stabilize
        run: |
          # Check if ECS cluster exists and wait for services
          if aws ecs describe-clusters --clusters batbern-dev --region ${{ env.AWS_REGION }} 2>/dev/null; then
            services=(
              "event-management-service"
              "speaker-coordination-service"
              "partner-coordination-service"
              "attendee-experience-service"
              "company-management-service"
            )

            for service in "${services[@]}"; do
              if aws ecs describe-services --cluster batbern-dev --services ${service} --region ${{ env.AWS_REGION }} 2>/dev/null | grep -q "ACTIVE"; then
                echo "Waiting for $service to stabilize..."
                aws ecs wait services-stable \
                  --cluster batbern-dev \
                  --services ${service} \
                  --region ${{ env.AWS_REGION }} || echo "::warning::Service ${service} not found or not stable"
              fi
            done
          else
            echo "::warning::ECS cluster batbern-dev not found yet"
          fi

      - name: Run smoke tests
        run: |
          if [ -f "scripts/ci/smoke-tests.sh" ]; then
            chmod +x scripts/ci/smoke-tests.sh
            ./scripts/ci/smoke-tests.sh \
              https://dev.batbern.ch \
              https://api-dev.batbern.ch || echo "::warning::Smoke tests not fully configured yet"
          else
            echo "::warning::Smoke tests script not found"
          fi

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Development deployment successful"
          echo "Version: ${GITHUB_SHA:0:7}-dev.${GITHUB_RUN_NUMBER}"
          echo "Branch: develop"
          echo "Commit: ${{ github.sha }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Development deployment failed"
          echo "Check logs for details"
