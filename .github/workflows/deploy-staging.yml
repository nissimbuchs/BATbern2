name: Deploy to Staging

on:
  workflow_run:
    workflows: ["Build Pipeline"]
    types: [completed]
    branches: [develop]
  workflow_call:
    # Allow this workflow to be called from other workflows (like build.yml)

env:
  AWS_REGION: eu-central-1
  ENVIRONMENT: staging

jobs:
  deploy-to-staging:
    runs-on: ubuntu-latest
    # Run if: (1) called directly OR (2) triggered by workflow_run with success
    if: |
      github.event_name == 'workflow_call' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955 # v4.3.0
        with:
          # Use workflow_run SHA if available, otherwise use current ref
          ref: ${{ github.event.workflow_run.head_sha || github.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.3.1
        with:
          role-to-assume: arn:aws:iam::188701360969:role/batbern-staging-github-actions-role
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Node.js 20
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4.4.0
        with:
          node-version: '20'

      - name: Install CDK dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Build frontend for deployment
        working-directory: ./web-frontend
        run: |
          if [ -f "package.json" ]; then
            echo "Building frontend for staging..."
            npm ci
            npm run build
            echo "✅ Frontend build complete: dist/ ready for CDK deployment"
          else
            echo "::warning::Frontend package.json not found, skipping build"
          fi
        env:
          VITE_API_URL: https://api.staging.batbern.ch
          VITE_AWS_REGION: ${{ env.AWS_REGION }}
          VITE_COGNITO_USER_POOL_ID: ${{ secrets.STAGING_COGNITO_USER_POOL_ID }}
          VITE_COGNITO_CLIENT_ID: ${{ secrets.STAGING_COGNITO_CLIENT_ID }}

      - name: Set up JDK 21
        uses: actions/setup-java@c5195efecf7bdfc987ee8bae7a71cb8b11521c00 # v4.7.1
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Create database backup
        run: |
          echo "Creating database backup..."
          SNAPSHOT_ID="batbern-staging-pre-deploy-$(date +%Y%m%d-%H%M%S)"

          if aws rds describe-db-instances --db-instance-identifier batbern-staging-postgres --region ${{ env.AWS_REGION }} 2>/dev/null; then
            aws rds create-db-snapshot \
              --db-instance-identifier batbern-staging-postgres \
              --db-snapshot-identifier $SNAPSHOT_ID \
              --region ${{ env.AWS_REGION }}

            echo "Waiting for snapshot to complete..."
            aws rds wait db-snapshot-completed \
              --db-snapshot-identifier $SNAPSHOT_ID \
              --region ${{ env.AWS_REGION }}

            echo "SNAPSHOT_ID=$SNAPSHOT_ID" >> $GITHUB_ENV
            echo "✅ Database backup created: $SNAPSHOT_ID"
          else
            echo "::warning::Database instance not found, skipping backup"
          fi

      - name: Run database migrations
        run: |
          if [ -d "shared-kernel" ] && [ -f "shared-kernel/gradlew" ]; then
            cd shared-kernel
            chmod +x gradlew
            echo "Running Flyway migrations..."
            ./gradlew flywayMigrate \
              -Dflyway.url=${{ secrets.STAGING_DB_URL }} \
              -Dflyway.user=${{ secrets.STAGING_DB_USER }} \
              -Dflyway.password=${{ secrets.STAGING_DB_PASSWORD }} \
              --no-daemon
            echo "✅ Database migrations completed successfully"
          else
            echo "::error::Shared kernel or gradlew not found"
            exit 1
          fi

      - name: Deploy infrastructure to staging
        working-directory: ./infrastructure
        run: |
          if [ -f "package.json" ]; then
            echo "Deploying version: ${{ github.sha }}"

            npm run deploy:staging -- \
              --context version=${{ github.sha }} \
              --require-approval never

            echo "✅ CDK deployment completed successfully"
          else
            echo "::error::Infrastructure package.json not found"
            exit 1
          fi
        env:
          IMAGE_TAG: ${{ github.sha }}

      - name: Wait for ECS services to stabilize
        run: |
          if aws ecs describe-clusters --clusters batbern-staging --region ${{ env.AWS_REGION }} 2>/dev/null; then
            services=(
              "event-management-service"
              "speaker-coordination-service"
              "partner-coordination-service"
              "attendee-experience-service"
              "company-user-management-service"
            )

            for service in "${services[@]}"; do
              if aws ecs describe-services --cluster batbern-staging --services ${service} --region ${{ env.AWS_REGION }} 2>/dev/null | grep -q "ACTIVE"; then
                echo "Waiting for $service to stabilize..."
                aws ecs wait services-stable \
                  --cluster batbern-staging \
                  --services ${service} \
                  --region ${{ env.AWS_REGION }} || echo "::warning::Service ${service} not found or not stable"
              fi
            done
          else
            echo "::warning::ECS cluster batbern-staging not found yet"
          fi

      - name: Run smoke tests
        run: |
          if [ -f "scripts/ci/smoke-tests.sh" ]; then
            chmod +x scripts/ci/smoke-tests.sh
            echo "Running smoke tests against deployed staging environment..."
            ./scripts/ci/smoke-tests.sh \
              https://staging.batbern.ch \
              https://api.staging.batbern.ch
            echo "✅ Smoke tests passed"
          else
            echo "::error::Smoke tests script not found at scripts/ci/smoke-tests.sh"
            exit 1
          fi

      - name: Run CORS validation tests
        run: |
          if [ -f "scripts/ci/cors-validation-tests.sh" ]; then
            chmod +x scripts/ci/cors-validation-tests.sh
            echo "Running CORS validation tests..."
            ./scripts/ci/cors-validation-tests.sh \
              https://api.staging.batbern.ch \
              https://staging.batbern.ch
            echo "✅ CORS validation tests passed"
          else
            echo "::error::CORS validation tests script not found"
            exit 1
          fi

      - name: Run header propagation tests
        run: |
          if [ -f "scripts/ci/header-propagation-tests.sh" ]; then
            chmod +x scripts/ci/header-propagation-tests.sh
            echo "Running header propagation tests..."
            ./scripts/ci/header-propagation-tests.sh \
              https://api.staging.batbern.ch
            echo "✅ Header propagation tests passed"
          else
            echo "::error::Header propagation tests script not found"
            exit 1
          fi

      - name: Run Bruno API contract tests
        run: |
          if [ -f "scripts/ci/run-bruno-tests.sh" ]; then
            chmod +x scripts/ci/run-bruno-tests.sh
            echo "Running Bruno API contract tests..."
            # Note: Auth token would be retrieved from Cognito in real deployment
            # For now, tests will skip authenticated endpoints if no token provided
            ./scripts/ci/run-bruno-tests.sh staging || echo "::warning::Bruno tests not fully configured"
            echo "✅ Bruno API contract tests completed"
          else
            echo "::warning::Bruno test script not found, skipping"
          fi

      - name: Run E2E infrastructure tests
        working-directory: ./infrastructure
        run: |
          echo "Running E2E tests against deployed staging infrastructure..."
          if [ -d "test/e2e" ]; then
            TEST_E2E=true TEST_ENVIRONMENT=staging npm test -- test/e2e/
            echo "✅ E2E infrastructure tests passed"
          else
            echo "::warning::E2E test directory not found, skipping"
          fi
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}

      - name: Get auth token for tests
        id: get-auth-token
        run: |
          # Use STAGING_AUTH_TOKEN secret (set in repo settings)
          # To refresh token: ./scripts/auth/get-token.sh staging <email> <password>
          # Then update the secret in GitHub repo settings
          echo "AUTH_TOKEN=${{ secrets.STAGING_AUTH_TOKEN }}" >> $GITHUB_OUTPUT

      - name: Run frontend E2E tests (Playwright)
        working-directory: ./web-frontend
        run: |
          echo "Running Playwright E2E tests against deployed staging environment..."
          # Install Playwright if not cached
          if [ -f "playwright.config.ts" ] || [ -f "playwright.config.js" ]; then
            npm install -D @playwright/test
            npx playwright install --with-deps chromium
            # Run E2E tests
            npx playwright test --project=chromium
            echo "✅ Frontend E2E tests passed"
          else
            echo "::warning::Playwright config not found, skipping frontend E2E tests"
          fi
        env:
          E2E_BASE_URL: https://staging.batbern.ch
          E2E_API_URL: https://api.staging.batbern.ch
          E2E_AWS_REGION: ${{ env.AWS_REGION }}
          AUTH_TOKEN: ${{ steps.get-auth-token.outputs.AUTH_TOKEN }}

      - name: Upload Playwright test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-staging
          path: web-frontend/playwright-report/
          retention-days: 7

      - name: Notify deployment success
        if: success()
        run: |
          echo "✅ Staging deployment successful"
          echo "Version: ${{ github.sha }}"
          echo "Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Notify deployment failure
        if: failure()
        run: |
          echo "❌ Staging deployment failed"
          echo "Database backup available: ${{ env.SNAPSHOT_ID }}"
          echo "Workflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
