name: "CodeQL Security Analysis"

# CodeQL SAST (Static Application Security Testing) Workflow
#
# Implements AC12: SAST Scanning from Story 1.11
#
# This workflow performs static code analysis to find security vulnerabilities:
# - SQL injection
# - XSS vulnerabilities
# - Path traversal
# - Command injection
# - And more...
#
# More info: https://codeql.github.com/

on:
  push:
    branches: [ develop, main, master ]
  pull_request:
    branches: [ develop, main, master ]
  schedule:
    # Run CodeQL analysis daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  analyze-java:
    name: Analyze Java Code
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: java
          queries: +security-and-quality
          # Use security-extended query suite for more comprehensive scanning
          config: |
            queries:
              - uses: security-extended
              - uses: security-and-quality

      - name: Build Java projects
        run: |
          # Build API Gateway
          if [ -f "api-gateway/gradlew" ]; then
            cd api-gateway
            chmod +x gradlew
            ./gradlew clean build -x test --no-daemon
            cd ..
          fi

          # Build Shared Kernel
          if [ -f "shared-kernel/gradlew" ]; then
            cd shared-kernel
            chmod +x gradlew
            ./gradlew clean build -x test --no-daemon
            cd ..
          fi

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:java"
          upload: true

  analyze-typescript:
    name: Analyze TypeScript Code
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            web-frontend/package-lock.json
            infrastructure/package-lock.json

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript-typescript
          queries: +security-and-quality
          # Use security-extended query suite for more comprehensive scanning
          config: |
            queries:
              - uses: security-extended
              - uses: security-and-quality

      - name: Build TypeScript projects
        run: |
          # Build Frontend
          if [ -d "web-frontend" ] && [ -f "web-frontend/package.json" ]; then
            cd web-frontend
            npm ci
            npm run build || echo "Frontend build skipped"
            cd ..
          fi

          # Build Infrastructure
          if [ -d "infrastructure" ] && [ -f "infrastructure/package.json" ]; then
            cd infrastructure
            npm ci
            npm run build || echo "Infrastructure build skipped"
            cd ..
          fi

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript-typescript"
          upload: true

  security-summary:
    name: Security Scan Summary
    runs-on: ubuntu-latest
    needs: [analyze-java, analyze-typescript]
    if: always()

    steps:
      - name: Check security scan results
        run: |
          echo "### Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "âœ… CodeQL analysis completed for:" >> $GITHUB_STEP_SUMMARY
          echo "- Java (API Gateway & Shared Kernel)" >> $GITHUB_STEP_SUMMARY
          echo "- TypeScript (Frontend & Infrastructure)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ðŸ”’ Review security alerts in the Security tab" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "For details, see: https://github.com/${{ github.repository }}/security/code-scanning" >> $GITHUB_STEP_SUMMARY
