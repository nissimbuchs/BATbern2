name: Promote to Staging

on:
  workflow_run:
    workflows: ["Build Pipeline"]
    types: [completed]
    branches: [develop]

env:
  AWS_REGION: eu-central-1
  SOURCE_ENV: dev
  TARGET_ENV: staging

jobs:
  validate-dev-environment:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Validate dev environment health
        run: |
          chmod +x scripts/ci/validate-environment.sh
          scripts/ci/validate-environment.sh ${{ env.SOURCE_ENV }}

      - name: Run dev smoke tests
        run: |
          chmod +x scripts/ci/smoke-tests.sh
          scripts/ci/smoke-tests.sh https://dev.batbern.ch https://api-dev.batbern.ch

      - name: Check dev deployment age
        run: |
          # Ensure dev has been stable for at least 2 hours
          DEPLOY_TIME=$(aws ecs describe-services \
            --cluster batbern-dev \
            --services event-management-service \
            --query 'services[0].deployments[0].createdAt' \
            --output text)

          DEPLOY_EPOCH=$(date -d "$DEPLOY_TIME" +%s)
          NOW_EPOCH=$(date +%s)
          AGE_HOURS=$(( ($NOW_EPOCH - $DEPLOY_EPOCH) / 3600 ))

          if [ $AGE_HOURS -lt 2 ]; then
            echo "Dev deployment is only $AGE_HOURS hours old. Minimum 2 hours required."
            exit 1
          fi
          echo "Dev deployment is $AGE_HOURS hours old - stable for promotion"

  run-validation-suite:
    needs: validate-dev-environment
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_DEV }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Run regression tests
        run: |
          chmod +x scripts/ci/regression-suite.sh
          scripts/ci/regression-suite.sh ${{ env.SOURCE_ENV }}

      - name: Run performance tests
        run: |
          chmod +x scripts/ci/performance-tests.sh
          scripts/ci/performance-tests.sh ${{ env.SOURCE_ENV }}

      - name: Run security scan
        run: |
          chmod +x scripts/ci/security-scan.sh
          scripts/ci/security-scan.sh ${{ env.SOURCE_ENV }}

      - name: Validate database schema
        run: |
          chmod +x scripts/ci/validate-schema.sh
          scripts/ci/validate-schema.sh ${{ env.SOURCE_ENV }} ${{ env.TARGET_ENV }}

  promote-configuration:
    needs: run-validation-suite
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Promote SSM parameters
        run: |
          chmod +x scripts/ci/promote-config.sh
          scripts/ci/promote-config.sh ${{ env.SOURCE_ENV }} ${{ env.TARGET_ENV }}

      - name: Sync feature flags
        env:
          LAUNCHDARKLY_API_TOKEN: ${{ secrets.LAUNCHDARKLY_API_TOKEN }}
        run: |
          chmod +x scripts/ci/sync-feature-flags.sh
          scripts/ci/sync-feature-flags.sh ${{ env.SOURCE_ENV }} ${{ env.TARGET_ENV }}

  deploy-to-staging:
    needs: promote-configuration
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN_STAGING }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: infrastructure/package-lock.json

      - name: Install CDK dependencies
        working-directory: ./infrastructure
        run: npm ci

      - name: Build frontend for deployment
        working-directory: ./web-frontend
        run: |
          if [ -f "package.json" ]; then
            echo "Building frontend for staging..."
            npm ci
            npm run build
            echo "âœ… Frontend build complete: dist/ ready for CDK deployment"
          else
            echo "::warning::Frontend package.json not found, skipping build"
          fi
        env:
          VITE_API_URL: https://api.staging.batbern.ch
          VITE_AWS_REGION: ${{ env.AWS_REGION }}
          VITE_COGNITO_USER_POOL_ID: ${{ secrets.STAGING_COGNITO_USER_POOL_ID }}
          VITE_COGNITO_CLIENT_ID: ${{ secrets.STAGING_COGNITO_CLIENT_ID }}

      - name: Deploy to staging (Blue/Green)
        working-directory: ./infrastructure
        run: |
          npm run deploy:staging -- \
            --context version=${{ github.sha }} \
            --require-approval never
        env:
          IMAGE_TAG: ${{ github.sha }}

      - name: Wait for staging services to stabilize
        run: |
          for service in event-management speaker-coordination partner-coordination attendee-experience company-management; do
            echo "Waiting for $service to stabilize..."
            aws ecs wait services-stable \
              --cluster batbern-staging \
              --services ${service}-service
          done

  smoke-test-staging:
    needs: deploy-to-staging
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run staging smoke tests
        run: |
          chmod +x scripts/ci/smoke-tests.sh
          scripts/ci/smoke-tests.sh https://staging.batbern.ch https://api-staging.batbern.ch

      - name: Notify team on success
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "âœ… Staging promotion successful",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Promotion Complete*\n\nCommit: ${{ github.sha }}\nEnvironment: Staging\nStatus: Success\nWorkflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: Notify team on failure
        if: failure()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "ðŸš¨ Staging promotion failed",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*Staging Promotion Failed*\n\nCommit: ${{ github.sha }}\nEnvironment: Staging\nStatus: Failed\nWorkflow: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
                  }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
