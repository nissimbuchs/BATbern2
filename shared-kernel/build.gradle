plugins {
    id 'java-library'
    id 'org.springframework.boot' version '3.5.6'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'maven-publish'
    id 'org.flywaydb.flyway' version '10.10.0'
}

group = 'ch.batbern'
version = '1.0.0'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    // Spring Boot dependencies
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    // AWS SDK for EventBridge
    implementation platform('software.amazon.awssdk:bom:2.25.0')
    implementation 'software.amazon.awssdk:eventbridge'

    // Lombok for boilerplate reduction
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // Jackson for JSON serialization
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'

    // Logging
    implementation 'org.slf4j:slf4j-api'
    implementation 'ch.qos.logback:logback-classic'

    // Database
    implementation 'org.postgresql:postgresql:42.7.2'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'

    // Testing dependencies
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.testcontainers:testcontainers'
    testImplementation 'org.testcontainers:localstack'
    testImplementation 'org.testcontainers:junit-jupiter'
}

// Configure JaCoCo for code coverage
apply plugin: 'jacoco'

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }
}

test.finalizedBy jacocoTestReport

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                // Use 60% threshold in CI for incremental development
                // TODO: Restore to 0.90 once coverage is improved
                minimum = System.getenv('CI') ? 0.60 : 0.90
            }
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

// Disable Spring Boot executable jar creation for library module
bootJar {
    enabled = false
}

jar {
    enabled = true
}

// Maven publishing configuration
publishing {
    publications {
        maven(MavenPublication) {
            from components.java

            pom {
                name = 'BATbern Shared Kernel'
                description = 'Shared domain types and events for BATbern platform microservices'
                url = 'https://github.com/batbern/shared-kernel'

                licenses {
                    license {
                        name = 'Proprietary'
                        url = 'https://batbern.ch/license'
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = 'internal'
            url = uri("${project.buildDir}/repo")
        }
    }
}

// Task to generate version info
task generateVersionInfo {
    doLast {
        def versionFile = file("$buildDir/generated/version.properties")
        versionFile.parentFile.mkdirs()
        versionFile.text = """
version=${project.version}
buildTime=${new Date().format("yyyy-MM-dd'T'HH:mm:ss'Z'", TimeZone.getTimeZone("UTC"))}
"""
    }
}

processResources.dependsOn generateVersionInfo
processResources {
    from("$buildDir/generated") {
        include "version.properties"
    }
}

// Flyway configuration for database migrations
// Configuration is provided via system properties or environment variables in CI/CD
flyway {
    // Default local development configuration (override with -Dflyway.* parameters)
    url = System.getProperty('flyway.url', 'jdbc:postgresql://localhost:5432/batbern')
    user = System.getProperty('flyway.user', 'postgres')
    password = System.getProperty('flyway.password', 'postgres')
    locations = ['classpath:db/migration']
    baselineOnMigrate = true
    baselineVersion = '0'
}