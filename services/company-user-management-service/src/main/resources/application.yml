spring:
  application:
    name: company-user-management-service

  datasource:
    url: ${DATABASE_URL:jdbc:postgresql://localhost:5432/batbern}
    username: ${DATABASE_USERNAME:batbern}
    password: ${DATABASE_PASSWORD:changeme}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000

  jpa:
    hibernate:
      ddl-auto: validate
    show-sql: false
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          time_zone: UTC

  flyway:
    enabled: true
    baseline-on-migrate: true
    locations: classpath:db/migration
    validate-on-migrate: true

  cache:
    type: caffeine
    caffeine:
      spec: maximumSize=1000,expireAfterWrite=15m
    cache-names:
      - companySearch

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${COGNITO_ISSUER_URI:https://cognito-idp.${AWS_REGION:eu-central-1}.amazonaws.com/${COGNITO_USER_POOL_ID:}}
          jwk-set-uri: ${COGNITO_JWK_SET_URI:https://cognito-idp.${AWS_REGION:eu-central-1}.amazonaws.com/${COGNITO_USER_POOL_ID:}/.well-known/jwks.json}

# AWS Configuration
aws:
  region: ${AWS_REGION:eu-central-1}
  s3:
    bucket:
      content: ${S3_CONTENT_BUCKET_NAME:batbern-content-staging}
    cloudfront:
      domain: ${CLOUDFRONT_DOMAIN:https://cdn.batbern.ch}
  eventbridge:
    bus:
      name: ${EVENT_BUS_NAME:batbern-staging}
    event-source: ch.batbern.company

# Server Configuration
server:
  port: 8080
  shutdown: graceful
  compression:
    enabled: false
    mime-types: application/json,application/xml,text/html,text/xml,text/plain
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: on_param

# Management/Actuator Configuration
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
  health:
    livenessState:
      enabled: true
    readinessState:
      enabled: true

# Logging Configuration
logging:
  level:
    root: INFO
    ch.batbern: ${LOG_LEVEL:DEBUG}
    org.springframework.web: INFO
    org.springframework.security: DEBUG
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

# SpringDoc OpenAPI Configuration
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    operations-sorter: alpha
    tags-sorter: alpha
  show-actuator: true

---
# Test Profile Configuration
spring:
  config:
    activate:
      on-profile: test

  datasource:
    url: jdbc:h2:mem:testdb
    driver-class-name: org.h2.Driver
    username: sa
    password:

  jpa:
    hibernate:
      ddl-auto: create-drop
    show-sql: true

  flyway:
    enabled: false

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:9999/oauth2/default

  cache:
    type: caffeine

logging:
  level:
    root: INFO
    ch.batbern: DEBUG

---
# Staging Profile Configuration
spring:
  config:
    activate:
      on-profile: staging

logging:
  level:
    root: INFO
    ch.batbern: DEBUG

---
# Production Profile Configuration
spring:
  config:
    activate:
      on-profile: production

logging:
  level:
    root: INFO
    ch.batbern: INFO
    org.springframework.security: INFO
    org.hibernate.SQL: INFO
