#!/bin/bash
# Test suite for AWS connectivity configuration
# Tests AC1 (AWS Infrastructure Connection) and AC9 (AWS Credentials)

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Test counters
TESTS_RUN=0
TESTS_PASSED=0
TESTS_FAILED=0

# Test helper functions
test_start() {
    local test_name="$1"
    TESTS_RUN=$((TESTS_RUN + 1))
    echo -n "Test ${TESTS_RUN}: ${test_name}... "
}

test_pass() {
    TESTS_PASSED=$((TESTS_PASSED + 1))
    echo -e "${GREEN}PASS${NC}"
}

test_fail() {
    local reason="$1"
    TESTS_FAILED=$((TESTS_FAILED + 1))
    echo -e "${RED}FAIL${NC}"
    echo "  Reason: ${reason}"
}

test_skip() {
    local reason="$1"
    echo -e "${YELLOW}SKIP${NC}"
    echo "  Reason: ${reason}"
}

echo "========================================"
echo "AWS Connectivity Configuration Tests"
echo "========================================"
echo ""

# Check prerequisites
if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}ERROR: docker-compose not found${NC}"
    exit 1
fi

if [ ! -f "docker-compose.yml" ]; then
    echo -e "${RED}ERROR: docker-compose.yml not found${NC}"
    echo "Please run this script from the project root"
    exit 1
fi

# AC1: AWS Infrastructure Connection Tests (Configuration Validation)
test_start "should_configureRDSConnection_when_databaseVariablesSet"
if docker-compose config 2>/dev/null | grep -q "DB_HOST"; then
    test_pass
else
    test_fail "DB_HOST not configured in docker-compose.yml"
fi

test_start "should_configureDatabasePort_when_postgresUsed"
if docker-compose config 2>/dev/null | grep -q "DB_PORT"; then
    test_pass
else
    test_fail "DB_PORT not configured"
fi

test_start "should_configureDatabaseCredentials_when_authNeeded"
if docker-compose config 2>/dev/null | grep -q "DB_USER" && \
   docker-compose config 2>/dev/null | grep -q "DB_PASSWORD"; then
    test_pass
else
    test_fail "Database credentials not configured"
fi

test_start "should_configureCognitoUserPool_when_authenticationEnabled"
if docker-compose config 2>/dev/null | grep -q "COGNITO_USER_POOL_ID"; then
    test_pass
else
    test_fail "COGNITO_USER_POOL_ID not configured"
fi

test_start "should_configureCognitoClient_when_authenticationEnabled"
if docker-compose config 2>/dev/null | grep -q "COGNITO_CLIENT_ID"; then
    test_pass
else
    test_fail "COGNITO_CLIENT_ID not configured"
fi

test_start "should_configureAWSRegion_when_servicesUsed"
if docker-compose config 2>/dev/null | grep -q "AWS_REGION"; then
    test_pass
else
    test_fail "AWS_REGION not configured"
fi

# AC9: AWS Credentials Tests
test_start "should_useEnvironmentVariables_when_credentialsNeeded"
# Check that DB_PASSWORD is configured (docker-compose config resolves env vars, so we can't check for ${})
# Instead, verify it exists in the raw file
if grep -q "DB_PASSWORD=\${DB_PASSWORD}" docker-compose.yml; then
    test_pass
else
    test_fail "Credentials should use environment variable syntax"
fi

test_start "should_gitignoreEnvFile_when_secretsStored"
if grep -q "^\.env$" .gitignore || grep -q "^\.env$" .gitignore 2>/dev/null; then
    test_pass
else
    test_fail ".env file not in .gitignore"
fi

test_start "should_gitignoreAllEnvFiles_when_secretsStored"
if grep -q "\*\.env" .gitignore || grep -q "\.env\..*" .gitignore 2>/dev/null; then
    test_pass
else
    test_fail "Not all .env files are gitignored"
fi

# Integration tests - Only run if AWS credentials are available
echo ""
echo "========================================"
echo "Integration Tests (Optional)"
echo "========================================"
echo ""

# Check if .env file exists (generated by setup-env.sh)
if [ -f ".env" ]; then
    test_start "should_loadEnvironmentVariables_when_envFileExists"
    if grep -q "DB_HOST=" .env && \
       grep -q "COGNITO_USER_POOL_ID=" .env; then
        test_pass
    else
        test_fail ".env file exists but is missing required variables"
    fi

    test_start "should_haveDatabaseEndpoint_when_envGenerated"
    if grep "DB_HOST=" .env | grep -q ".rds.amazonaws.com"; then
        test_pass
    else
        test_fail ".env DB_HOST doesn't look like an RDS endpoint"
    fi

    test_start "should_haveCognitoUserPoolID_when_envGenerated"
    if grep "COGNITO_USER_POOL_ID=" .env | grep -qE "eu-central-1_[a-zA-Z0-9]+"; then
        test_pass
    else
        test_skip ".env COGNITO_USER_POOL_ID format check skipped"
    fi
else
    echo -e "${YELLOW}Note: .env file not found${NC}"
    echo -e "${YELLOW}Run './scripts/config/sync-backend-config.sh development' to generate${NC}"
    echo -e "${YELLOW}Skipping integration tests that require .env file${NC}"
    echo ""
fi

# Print summary
echo "========================================"
echo "Test Summary"
echo "========================================"
echo "Tests run:    ${TESTS_RUN}"
echo -e "Tests passed: ${GREEN}${TESTS_PASSED}${NC}"
if [ ${TESTS_FAILED} -gt 0 ]; then
    echo -e "Tests failed: ${RED}${TESTS_FAILED}${NC}"
    exit 1
else
    echo -e "Tests failed: ${TESTS_FAILED}"
    echo ""
    echo -e "${GREEN}All tests passed!${NC}"
    exit 0
fi
