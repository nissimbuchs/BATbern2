#!/bin/bash
# BATbern Development Environment Setup Script
# Automatically generates .env file from AWS CDK stack outputs

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Configuration
AWS_PROFILE="${AWS_PROFILE:-batbern-mgmt}"
AWS_REGION="${AWS_REGION:-eu-central-1}"
ENVIRONMENT="development"
ENV_FILE=".env"

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}BATbern Development Environment Setup${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""

# Check prerequisites
echo "Checking prerequisites..."

if ! command -v aws &> /dev/null; then
    echo -e "${RED}Error: AWS CLI is not installed${NC}"
    echo "Install: https://docs.aws.amazon.com/cli/latest/userguide/getting-started-install.html"
    exit 1
fi

if ! command -v jq &> /dev/null; then
    echo -e "${RED}Error: jq is not installed${NC}"
    echo "Install: brew install jq (macOS) or apt-get install jq (Linux)"
    exit 1
fi

echo -e "${GREEN}✓${NC} Prerequisites check passed"
echo ""

# Verify AWS credentials
echo "Verifying AWS credentials (profile: ${AWS_PROFILE})..."
if ! aws sts get-caller-identity --profile ${AWS_PROFILE} --region ${AWS_REGION} &> /dev/null; then
    echo -e "${RED}Error: AWS credentials not configured or invalid${NC}"
    echo "Configure: aws configure --profile ${AWS_PROFILE}"
    exit 1
fi
echo -e "${GREEN}✓${NC} AWS credentials verified"
echo ""

# Function to get stack output
get_stack_output() {
    local stack_name=$1
    local output_key=$2
    local value=$(aws cloudformation describe-stacks \
        --stack-name "${stack_name}" \
        --profile ${AWS_PROFILE} \
        --region ${AWS_REGION} \
        2>/dev/null | jq -r ".Stacks[0].Outputs[] | select(.OutputKey==\"${output_key}\") | .OutputValue")

    if [ -z "$value" ] || [ "$value" == "null" ]; then
        return 1
    fi
    echo "$value"
}

# Fetch Database Stack outputs
echo "Fetching Database configuration from AWS..."
DB_STACK="BATbern-${ENVIRONMENT}-Database"

DB_ENDPOINT=$(get_stack_output "${DB_STACK}" "DatabaseEndpoint")
if [ $? -ne 0 ]; then
    echo -e "${RED}Error: Could not fetch database endpoint from stack ${DB_STACK}${NC}"
    echo "Make sure the database stack is deployed: cd infrastructure && npx cdk deploy ${DB_STACK}"
    exit 1
fi

DB_PORT=$(get_stack_output "${DB_STACK}" "DatabasePort")
DB_NAME=$(get_stack_output "${DB_STACK}" "DatabaseName")
DB_SECRET_NAME=$(get_stack_output "${DB_STACK}" "DatabaseSecretName")

echo -e "${GREEN}✓${NC} Database endpoint: ${DB_ENDPOINT}"
echo -e "${GREEN}✓${NC} Database port: ${DB_PORT}"
echo -e "${GREEN}✓${NC} Database name: ${DB_NAME}"
echo ""

# Fetch Database credentials from Secrets Manager
echo "Fetching database credentials from AWS Secrets Manager..."
DB_SECRET=$(aws secretsmanager get-secret-value \
    --secret-id "${DB_SECRET_NAME}" \
    --profile ${AWS_PROFILE} \
    --region ${AWS_REGION} \
    2>/dev/null | jq -r '.SecretString')

if [ -z "$DB_SECRET" ] || [ "$DB_SECRET" == "null" ]; then
    echo -e "${RED}Error: Could not fetch database credentials from Secrets Manager${NC}"
    exit 1
fi

DB_USER=$(echo "$DB_SECRET" | jq -r '.username')
DB_PASSWORD=$(echo "$DB_SECRET" | jq -r '.password')

echo -e "${GREEN}✓${NC} Database credentials retrieved"
echo ""

# Fetch Cognito Stack outputs
echo "Fetching Cognito configuration from AWS..."
COGNITO_STACK="BATbernCognitoStack"

COGNITO_USER_POOL_ID=$(get_stack_output "${COGNITO_STACK}" "UserPoolId")
if [ $? -ne 0 ]; then
    echo -e "${YELLOW}Warning: Could not fetch Cognito User Pool ID from stack ${COGNITO_STACK}${NC}"
    echo "Deploy the Cognito stack: cd infrastructure && npx cdk deploy ${COGNITO_STACK} --app 'npx ts-node bin/infrastructure.ts'"
    COGNITO_USER_POOL_ID="NOT_DEPLOYED"
    COGNITO_CLIENT_ID="NOT_DEPLOYED"
    COGNITO_DOMAIN_URL="NOT_DEPLOYED"
else
    COGNITO_CLIENT_ID=$(get_stack_output "${COGNITO_STACK}" "UserPoolClientId")
    COGNITO_DOMAIN_URL=$(get_stack_output "${COGNITO_STACK}" "UserPoolDomainUrl")
    echo -e "${GREEN}✓${NC} Cognito User Pool ID: ${COGNITO_USER_POOL_ID}"
    echo -e "${GREEN}✓${NC} Cognito Client ID: ${COGNITO_CLIENT_ID}"
fi
echo ""

# Generate .env file
echo "Generating ${ENV_FILE} file..."

cat > ${ENV_FILE} << EOF
# ==============================================
# BATbern Development Environment Configuration
# ==============================================
# Auto-generated by scripts/dev/setup-env.sh
# Generated at: $(date)
#
# WARNING: This file contains sensitive credentials!
# Do NOT commit this file to version control.
# ==============================================

# ==============================================
# AWS Database Configuration (RDS PostgreSQL)
# ==============================================
DB_HOST=${DB_ENDPOINT}
DB_PORT=${DB_PORT}
DB_NAME=${DB_NAME}
DB_USER=${DB_USER}
DB_PASSWORD=${DB_PASSWORD}
DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_ENDPOINT}:${DB_PORT}/${DB_NAME}

# ==============================================
# Redis Configuration (Local Docker Container)
# ==============================================
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_PASSWORD=

# ==============================================
# AWS Cognito Configuration
# ==============================================
AWS_REGION=${AWS_REGION}
COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}
COGNITO_DOMAIN_URL=${COGNITO_DOMAIN_URL}

# ==============================================
# Application Configuration
# ==============================================
SPRING_PROFILES_ACTIVE=local
LOG_LEVEL=DEBUG

# ==============================================
# API Gateway Configuration
# ==============================================
API_GATEWAY_PORT=8080

# ==============================================
# Frontend Configuration
# ==============================================
VITE_API_BASE_URL=http://localhost:8080
VITE_AWS_REGION=${AWS_REGION}
VITE_COGNITO_USER_POOL_ID=${COGNITO_USER_POOL_ID}
VITE_COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}

# ==============================================
# Feature Flags
# ==============================================
ENABLE_COGNITO_AUTH=true

EOF

echo -e "${GREEN}✓${NC} ${ENV_FILE} file generated successfully"
echo ""

# Verify .env file was created
if [ ! -f "${ENV_FILE}" ]; then
    echo -e "${RED}Error: Failed to create ${ENV_FILE} file${NC}"
    exit 1
fi

# Print summary
echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}Setup Complete!${NC}"
echo -e "${GREEN}========================================${NC}"
echo ""
echo "Your development environment is configured:"
echo ""
echo "  Database:    ${DB_ENDPOINT}"
echo "  Cognito:     ${COGNITO_USER_POOL_ID}"
echo "  Environment: ${ENV_FILE}"
echo ""
echo "Next steps:"
echo "  1. Review the generated ${ENV_FILE} file"
echo "  2. Start Docker services: docker-compose up -d"
echo "  3. View logs: docker-compose logs -f"
echo ""
echo -e "${YELLOW}Note: The ${ENV_FILE} file contains sensitive credentials.${NC}"
echo -e "${YELLOW}Make sure it's listed in .gitignore${NC}"
echo ""
